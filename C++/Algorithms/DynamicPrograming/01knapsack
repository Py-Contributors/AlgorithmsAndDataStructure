/* You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one quantity of each item.*/
/*In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).*/

//For instance lets say we have 100 items and their weights are in the range 1-100, you can change value range as per your convenience

//The following program solves the above problem, you can change value range as per your convenience

#include <iostream>
using namespace std;

//making a matrix to store maximum values
//first parameter 102 is for number of items i.e. 100
//Second parameter 10002 is for maximum sum of weights of 100 items i.e. 100x100=10000
int sack[102][10002];

int max(int a, int b){
    if(a>b) return a;
    else return b;
}

int main(){
    //declaring variables
    int n,W,i,j,wt[102],val[102];
    
    //input Total number of Items and maximum weight
    cin>>n>>W;
    
    //Input value and weight of each 'n' item
    for(i=0;i<n;i++) cin>>wt[i]>>val[i];
    
    //Loop for traversing through all items
    for(i=0;i<n+1;i++){
    
        //Loop for traversing through all weights less than or equal to max weight
        for(j=0;j<W+1;j++){
        
            //Checking for base condition
            if(i==0||j==0) sack[i][j]=0;
            else{
            
                //If item weight is less than or equal to max weight that bag can hold, on then item can be considered for adding in the bag
                if(wt[i-1]<=j) sack[i][j]=max(val[i-1]+sack[i-1][j-wt[i-1],sack[i-1][j]);
                
                //If item weight is greater than max weight that bag can hold, on then the item cannot be added in the bag
                else sack[i][j]=sack[i-1][j];
            }
        }
    }
    cout<<sack[n][W];
    return 0;
}


//Example
/*
3
4
1 2 3
4 5 1
*/

//Solution
//3
